generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                          String    @id @default(cuid())
  name                        String?
  email                       String?   @unique
  password                    String
  emailVerified               DateTime?
  image                       String?
  File                        File[]
  Message                     Message[]
  accounts                    Account[]
  sessions                    Session[]
  mercadopagoCustomerId       String?   @unique @map(name: "mercadopago_customer_id")
  mercadopagoSubscriptionId   String?   @unique @map(name: "mercadopago_subscription_id")
  mercadopagoPriceId          String?   @unique @map(name: "mercadopago_price_id")
  mercadopagoCurrentPeriodEnd DateTime? @unique @map(name: "mercadopago_current_period_end")
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model File {
  id           String       @unique @default(uuid())
  name         String
  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String
  messages     Message[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  User         User?        @relation(fields: [userId], references: [id])
  userId       String?
}

model Message {
  id            String   @id @default(uuid())
  text          String   @db.Text()
  isUserMessage Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  User          User?    @relation(fields: [userId], references: [id])
  userId        String?
  File          File?    @relation(fields: [fileId], references: [id])
  fileId        String?
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

enum Plan {
  FREE
  STANDARD
  PROFESSIONAL
}
