generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                        String    @id @default(cuid())
    name                      String
    email                     String    @unique
    password                  String
    image                     String?
    createdAt                 DateTime  @default(now())
    updatedAt                 DateTime  @updatedAt
    mercadopagoSubscriptionId String?   @unique
    plan                      Plan      @default(FREE)
    emailVerified             Boolean   @default(false)
    accounts                  Account[]
    File                      File[]
    Message                   Message[]
    sessions                  Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique @default(uuid())
    expires    DateTime

    @@unique([identifier, token])
}

model File {
    id        String    @unique @default(uuid())
    name      String
    url       String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    userId    String?
    awsKey    String
    User      User?     @relation(fields: [userId], references: [id])
    messages  Message[]
}

model Message {
    id            String   @id @default(uuid())
    text          String
    isUserMessage Boolean
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    userId        String?
    fileId        String?
    File          File?    @relation(fields: [fileId], references: [id])
    User          User?    @relation(fields: [userId], references: [id])
}

enum Plan {
    FREE
    STANDARD
    PROFESSIONAL
}
